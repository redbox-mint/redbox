<style>
div[id^="dc:coverage.vivo:GeographicLocation"] label.widgetLabel { display:none }
div[id^="dc:coverage.vivo:GeographicLocation"] select { display:none }
.olControlModifyFeatureItemActive { display:none;}
.olControlModifyFeatureItemInactive {display:none;}
</style> 
<script src="$portalPath/js/wizard.js"></script>
<script type="text/javascript">
	var selfSubmission = {
		submit_hidden: true,
		toggle_submit: function () {
			if($("[id='readyforreview']").attr('checked') == null) { 
				$("[transition-name='Submit']").hide(); 
			} else {
			   $("[transition-name='Submit']").show();
			}
		}
		
	};
	$(document).ready(function() {
		
	   //unhook old save button handling and rehook with code to set language label.
	   var saveButtons = $("button[form-action='save']");
		for(var i =0; i< saveButtons.length; i++) {
 		 saveButtons[i].onclick = null;
		}

       $("button[form-action='save']").click(function() {

    			var label = $("[id='dc:language.dc:identifier']").find(":selected").text();
                $("[id='dc:language.skos:prefLabel']").val(label);
                jaffa.form.synch(false);
                transition_click(this);
		});


		wizard_init('#simpleworkflow-form','h1.tab-heading', "$portalPath/form-components/dmpt-self-submission.json", "dmptTabs");
		
		$("[id='dataLicensingAccess.manager']").attr('disabled','disabled');
		
		//on change event to set read only field in Data licensing and access with data manager
		$("[id='locrel:prc.foaf:Person.foaf:familyName']").change(function() {
			var dataManager= $("[id='locrel:prc.foaf:Person.foaf:title']").val() + " " +
 			$("[id='locrel:prc.foaf:Person.foaf:givenName']").val() + " " + $("[id='locrel:prc.foaf:Person.foaf:familyName']").val();
			$("[id='dataLicensingAccess.manager']").val(dataManager);
		});
		
		// hide Submit link until user acknowledges 
		$("[transition-name='Submit']").hide();
		$("[id='readyforreview']").change(selfSubmission.toggle_submit);	
   	})
</script>

<!-- // For simpleform-footer.vm -->
	
<script type="text/javascript" src="$portalPath/js/autocomplete/jquery.autocomplete.old.js"></script>
	
<script type="text/javascript">
	(function($){
	    // OpenLayers stylesheets
	    $('head').append('<link rel="stylesheet" type="text/css" id="openLayersCss1">');
	    $('#openLayersCss1').attr('href', '$portalPath/openlayers/theme/default/style.css');
	    $('head').append('<link rel="stylesheet" type="text/css" id="openLayersCss2">');
	    $('#openLayersCss2').attr('href', '$portalPath/openlayers/redbox.css');

	    $(function(){
	            // OpenLayers init, store it globally so the Geonames lookup can hit it later
	            window["openLayersMap"] = loadOpenLayers();
	    });
	})(jQuery);
</script>

<script type="text/javascript">
	//The following script is required for the GeoNames processing associated with the OpenStreeMap

	    function cleanRdfToJs(input) {
	        var output = input.replace(/\./g, "\\.");
	        return output.replace(/\:/g, "\\:");
	    }

	    function getReDBoxById(redboxId) {
	        var cleanId = cleanRdfToJs(redboxId);
	        return $("#" + cleanId);
	    }

	$(function(){
	    function splitGeonamesData(row) {
	        var items = row[0].split("::");
	        return {
	            id: items[0],
	            uri: items[1],
	            display: items[2],
	            north: items[3],
	            east: items[4]
	        };
	    }
	    
	    $("#add-location").click(function(){
	        getReDBoxById("dc:coverage.vivo:GeographicLocation.0.coords").hide();
	    });

	    $("#geonamesLookup").live("focus", function(){
	        var elem = $(this);
	        elem.unautocomplete();
	            elem.autocompleteold(
	                "$portalPath/proxyGet?ns=Geonames&autocomplete=true&fields=id,geonames_uri,display,latitude,longitude",
	                {
	                    extraParams: {
	                        qs: function() {
	                            var userInput = elem.val();
	                            var commaPos = userInput.indexOf(",");
	                            if(commaPos!=-1){
	                                userInput = userInput.substring(0,commaPos);
	                            }
	                            return "func=search&format=json&rows=25&q=" + escape(userInput);
	                        }
	                    },
	                    formatItem: function(row) { return splitGeonamesData(row).display; },
	                    formatResult: function(row) { return splitGeonamesData(row).display; },
	                    width: "40em"
	                }).result(function(event, row) {
	                    if (row) {
	                        var data = splitGeonamesData(row);
	                        // Pan OpenLayers Map
	                        if (window["openLayersMap"] != null) {
	                            window["openLayersMap"].panTo(data.east, data.north, 10);
	                        }
	                    }
	                })
	        }).live("blur", function(){
	            $(this).search();
	        });
	    
	    $(".autocomplete-geonames").live("focus", function(){
	        var elem = $(this);
	        var baseId = elem.attr("id").replace(".rdf:PlainLiteral", "");
	        var wktElem = getReDBoxById(baseId+".redbox:wktRaw");
	        //Ensure the text box is always free text
	        getReDBoxById(baseId+".dc:type").val("text");
	        elem.unautocomplete();
	        if(getReDBoxById(baseId+".dc:type").val() == "text" && wktElem.val() == ""){
	            elem.autocompleteold(
	                "$portalPath/proxyGet?ns=Geonames&autocomplete=true&fields=id,geonames_uri,display,latitude,longitude",
	                {
	                    extraParams: {
	                        qs: function() {
	                            var userInput = elem.val();
	                            var commaPos = userInput.indexOf(",");
	                            if(commaPos!=-1){
	                                userInput = userInput.substring(0,commaPos);
	                            }
	                            return "func=search&format=json&rows=25&q=" + escape(userInput);
	                        }
	                    },
	                    formatItem: function(row) { return splitGeonamesData(row).display; },
	                    formatResult: function(row) { return splitGeonamesData(row).display; },
	                    width: "40em"
	                }).result(function(event, row) {
	                    if (row) {
	                        var data = splitGeonamesData(row);
	                        var coordsElem = getReDBoxById(baseId+".coords");
	                        getReDBoxById(baseId+".dc:identifier").val(data.uri);
	                        getReDBoxById(baseId+".geo:long").val(data.east);
	                        getReDBoxById(baseId+".geo:lat").val(data.north);
	                        coordsElem.find(".east").text(data.east);
	                        coordsElem.find(".north").text(data.north);
	                        coordsElem.show();
	                    }
	                })
	            }
	        }).live("blur", function(){
	            $(this).search();
	        });

	    $(".map-link").live("click", function(){
	        var p = $(this).parent();
	        var baseId = p.attr("id").replace(".coords", "");
	        var long = getReDBoxById(baseId+".geo:long").val();
	        var lat = getReDBoxById(baseId+".geo:lat").val();
	        window["openLayersMap"].panTo(long, lat, 10);
	        return false;
	    });

	    $(".clear-link").live("click", function(){
	        var p = $(this).parent();
	        var baseId = p.attr("id").replace(".coords", "");
	        getReDBoxById(baseId+".dc:identifier").removeAttr("value");
	        getReDBoxById(baseId+".geo:long").removeAttr("value");
	        getReDBoxById(baseId+".geo:lat").removeAttr("value");
	        p.hide();
	    });

	    var lastTypeValue;
	    $(".locationType").live("focus", function() {
	        // This is only really useful on the first use of the drop-down
	        lastTypeValue = $(this).val();
	    }).live("change", function(e){
	        var elem = $(this);
	        var baseId = elem.attr("id").replace(".dc:type", "");
	        var wktElem = getReDBoxById(baseId+".redbox:wktRaw");
	        var wktString = wktElem.val();
	        // OpenLayers Row
	        if (wktString != "") {
	            var outElem = getReDBoxById(baseId+".rdf:PlainLiteral");
	            var type = elem.val();
	            // The alert window causes focus changes... use this temp variable instead
	            var lastType = lastTypeValue;
	            var output = window["openLayersMap"].mapWktData(wktString, type);
	            if (output != null) {
	                outElem.val(output);
	                // Fix the focus loss from the alert
	                lastTypeValue = type;
	            } else {
	                elem.val(lastType);
	                // Fix the focus loss from the alert
	                lastTypeValue = lastType;
	                return;
	            }

	        // Legacy input
	        } else {
	            var uriElem = getReDBoxById(baseId+".dc:identifier");           
                $(this).val("text");
	            
	        }
	    });
	    
	   
	});
	</script>
	
<script type="text/javascript" src="$portalPath/js/jquery.1.7.1.min.js"></script>
<script>var $171 = jQuery.noConflict(true);</script>
<script type="text/javascript" src="$portalPath/js/tinymce/tinymce.min.js"></script>
<script type="text/javascript">
    //multiple descriptions support
    function escapeId(rawId) {
        return "#" + rawId.replace( /(:|\.)/g, "\\$1" );
    }

    function updateDescriptionsRDAComplianceValidation() {
        var hasCompliance = false;
        $('.descriptionSelect').each(function(index, e) {
            if ($171.inArray($(this).val(), ['brief','full']) != -1) {
                hasCompliance = true;
            }
        });
        $('#isDescriptionRDACompliant').val("");
        if (hasCompliance) {
            $('#isDescriptionRDACompliant').val(hasCompliance);
            $('#isDescriptionRDACompliant').hide();
        }
    }

    function updateEmptyDescriptionsValidation() {
        var hasAllDescriptions = true;
        $('.descriptionInput').each(function(index, e) {
            var jQelement = $(escapeId(e.id));
            if (jQelement.val() == "") {
                hasAllDescriptions = false;
            }
        });
        $('#hasNoEmptyDescriptions').val("");
        if (hasAllDescriptions) {
            $('#hasNoEmptyDescriptions').val(hasAllDescriptions);
            $('#hasNoEmptyDescriptions').hide();
        }
    }

    function updateAllDescriptionsValidation() {
        updateEmptyDescriptionsValidation();
        updateDescriptionsRDAComplianceValidation();
    }

    function updateDescription(text, jQElement) {
        var descriptionInputElementId = escapeId($(jQElement).attr('id'));
        ## ensure all linebreaks are removed - otherwise this will break views
        var sanitisedText = text.replace(/(\r\n|\n|\r)/gm,"");
        ## need to set html to get unescaped text to render correctly in preview.
        var unescaped = $(descriptionInputElementId).html(sanitisedText).text();
        $(descriptionInputElementId).val(unescaped);
        ## need to set text to get escaped html
        $(descriptionInputElementId).focus();
        var escaped = $(descriptionInputElementId).text(unescaped).html();
        getDescriptionParent(descriptionInputElementId).find('.wysiwygShadow').val(escaped);
        updateAllDescriptionsValidation();
    }


    function updateDescriptionFromEditor(text, jqEditorElement) {
        updateDescription(text, jqEditorElement);
        $(jqEditorElement).focus();
    }


    function deleteDescription(event) {
        // reset all wysiwyg editors
        tinymce.remove();
        $(".wysiwygEditor").each( function(index, e) {
            var descriptionId = e.id;
            // jaffa will auto adjust container count - need to force mce to do the same
            var nextDescriptionCount = index + 1;
            var correctedId = descriptionId.replace(/(\d)+/g,nextDescriptionCount);
            $(escapeId(descriptionId)).attr('id', correctedId);
            $(correctedId).show();
            editorUpdate(e);
        });
    }

    function editorUpdate(e) {
        tinymce.init({
            width: 800,
            selector: escapeId(e.id),
            plugins: ["link","image"],
            menubar: false,
            setup : function(ed) {
                ed.on('init', function(e) {
                    var descriptionId = $(this).attr('id');
                    var parent = getDescriptionParent(escapeId(descriptionId));
                    var deleteId = descriptionId.replace("text", "delete");
                    $171(parent).find('.jaffaDeleteItem').attr('id', deleteId);
                    $171(parent).one('click', escapeId(deleteId), deleteDescription);
                    updateAllDescriptionsValidation();
                });
                ed.on('click', function(e) {
                    updateDescriptionFromEditor(tinymce.activeEditor.getContent(), this);
                });
                ed.on('change', function(e) {
                    updateDescriptionFromEditor(tinymce.activeEditor.getContent(), this);
                });
                ed.on('keyup', function(e) {
                    updateDescriptionFromEditor(tinymce.activeEditor.getContent(), this);
                });
                ed.on('blur', function(e) {
                    updateAllDescriptionsValidation();
                });
            }
        });
    }

    function resetDescription(e) {
        // incoming descriptions may have pre-wysiwyg escaped values, reset them before wysiwyg
        var descriptionId = e.id;
        var text = $(escapeId(descriptionId)).val();
        var unescaped = $(escapeId(descriptionId)).html(text).text();
        var escaped = $(escapeId(descriptionId)).text(unescaped).html();
        //reset
        $(escapeId(descriptionId)).html('');
        var shadowId = descriptionId.replace("text", "shadow");
        $(escapeId(descriptionId)).val(unescaped);
        $(escapeId(shadowId)).val(escaped);
    }

    function getDescriptionParent(jQDescriptionElement) {
        var parentId = $(jQDescriptionElement).attr("id").replace('text', 'ContainerItem');
        var jQDescriptionElementId = $(jQDescriptionElement).attr('id');
        return $(escapeId(jQDescriptionElementId)).parents(escapeId(parentId));
    }

    function startFirst() {
         var firstDescriptionJqElement = $(escapeId('dc:description.1.text'));
         var iFrameId = escapeId('dc:description.1.text') + '_ifr';
         resetDescription($(firstDescriptionJqElement)[0]);
         editorUpdate($(firstDescriptionJqElement)[0]);
         var initialValue = $(firstDescriptionJqElement).val();
         getDescriptionParent(firstDescriptionJqElement).find(iFrameId).contents().find('#tinymce').val(initialValue);
    }

    function initialiseSingleDescription() {
        //  a hack to wait for jaffa to come back with first value
        var counter = 0;
        var repeats = 6;
        var intervalId = setInterval(function() {
            var len = $(escapeId('dc:description')).find('.jaffaDeleteItem').length;
            if (len > 1) {
                window.clearInterval(intervalId);
            }
            var wywiwygContainer = $(escapeId('dc:description')).find('[id$=_ifr]')
            if ($(wywiwygContainer).is(':visible')) {
                 startFirst();
                 window.clearInterval(intervalId);
            }
            if (++counter === repeats) {
                startFirst();
                window.clearInterval(intervalId);
            }
        }, 500);
    }


    $171(document).ready(function() {
        initialiseSingleDescription();
        $171(escapeId("dc:description")).on('click', '.jaffaAddItem', function() {
           // jaffa add is clicked on initial form load and jaffa is slower than tinymce
           //    - ensures descriptions always clean
           $('.wysiwygEditor').each(function() {
               resetDescription(this);
               editorUpdate(this);
           });
       });

        $171(escapeId('dc:description')).on('change', '.descriptionSelect', updateAllDescriptionsValidation);

        // licence support
        $171('.simple-workflow.component-wrapper').on('change', escapeId('dc:license.dc:identifier'), function() {
            var regex = /(CC|ODC|PDDL).*/i;
            if (regex.test($(escapeId('dc:license.skos:prefLabel')).val())) {
                $("[id='dc:accessRightsType']").val("open");
            }
        });
    });
</script>

